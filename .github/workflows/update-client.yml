name: update-client

on:
  push:
    branches:
      - master
    paths:
      - packdata/client/pack.toml
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-new:
    name: check-new
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.client-version.outputs.version }}
      clean-tag: ${{ steps.clean-tag.outputs.tag }}
      is-new: ${{ steps.check-update.outputs.new }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get version
        id: client-version
        run: |
          ver=$(cat packdata/client/pack.toml | grep -Ei 'version = "[0-9]+.[0-9]+.[0-9]+"' | grep -oEi [0-9]+.[0-9]+.[0-9]+)
          echo "version=v$ver" >> $GITHUB_OUTPUT
        shell: bash

      - name: get previous tag
        id: previous-tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: v0.0.0

      - name: clean tag
        id: clean-tag
        run: |
          tag=${{ steps.client-version.outputs.version }}
          echo "tag=${tag:1}" >> $GITHUB_OUTPUT
        shell: bash

      - name: check update
        id: check-update
        run: |
          if [[ ${{ steps.client-version.outputs.version }} == ${{ steps.previous-tag.outputs.tag }} ]]; then
            echo "new=0" >> $GITHUB_OUTPUT
          else
            echo "new=1" >> $GITHUB_OUTPUT
          fi
        shell: bash

  build-and-upload:
    name: build-and-upload
    runs-on: ubuntu-latest
    needs: check-new
    if: needs.check-new.outputs.is-new == 1
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: refresh packs
        run: |
          tools/packwiz refresh -y --pack-file packdata/client/pack.toml --meta-folder packdata/client/mods
          tools/packwiz refresh -y --pack-file packdata/server/pack.toml --meta-folder packdata/server/mods
        shell: bash

      - name: build emotes
        run: |
          for pack in emotes/*.txt; do
              pack_name=$(cut -d '/' -f 2 <<< "$pack" | cut -d '.' -f 1)
              mkdir -p temp/$pack_name/data/emojiful/recipes
              cat << EOF > temp/$pack_name/pack.mcmeta
          {
            "pack": {
              "pack_format": 6,
              "description": "Emojiful emojis!"
            }
          }
          EOF
              cat $pack | while read line; do
                  name=$(cut -d ';' -f 1 <<< "$line" | tr '[:upper:]' '[:lower:]' )
                  link=$(cut -d ';' -f 2 <<< "$line")
                  cat << EOF > temp/$pack_name/data/emojiful/recipes/$name.json
          {
            "category": "$pack_name",
            "name": "$name",
            "url": "$link",
            "type": "emojiful:emoji_recipe"
          }
          EOF
              done
              cd temp/$pack_name
              zip -r $pack_name-resource.zip .
              mv $pack_name-resource.zip ..
              cd ../..
              rm -r temp/$pack_name
              mkdir -p public/datapacks
              mv temp/$pack_name-resource.zip public/datapacks
          done
          rm -r temp
        shell: bash

      - name: copy pack data
        run: |
          mkdir -p public/packdata
          cp -r packdata public
        shell: bash

      - name: export client pack
        run: |
          tools/packwiz curseforge export  -y --pack-file packdata/client/pack.toml --meta-folder packdata/client/mods
        shell: bash

      - name: install parse-changelog
        uses: taiki-e/install-action@parse-changelog

      - name: get release notes
        id: release-notes
        run: |
          echo 'notes<<EOF' >> $GITHUB_OUTPUT
          echo "$(parse-changelog CHANGELOG.md "${{ needs.check-new.outputs.clean-tag }}")" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: generate post path
        id: post-path
        run: |
          mkdir -p public/_posts
          date=$(date +'%Y-%m-%d')
          echo "path=public/_posts/$date-${{ needs.check-new.outputs.new-tag }}.md" >> $GITHUB_OUTPUT
        shell: bash

      - name: update web
        run: |
          link="https://github.com/${{ github.repository }}/releases"
          touch ${{ steps.post-path.outputs.path }}
          cat << EOF > ${{ steps.post-path.outputs.path }}
          ---
          title: CweamCraft ${{ needs.check-new.outputs.new-tag }}
          categories:
          - Releases
          ---

          ${{ steps.release-notes.outputs.notes }}

          {% include button.html text="Download File üìÅ" link="/download" %} {% include button.html text="View on GitHub" link="$link/tag/${{ needs.check-new.outputs.new-tag }}" icon="github" color="#59c4be" %}
          EOF
          sed -i "s~%LATEST_BUTTON~{% include button.html text=\"CweamCraft-${{ needs.check-new.outputs.clean-tag }}.zip üìÅ\" link=\"$link/download/${{ needs.check-new.outputs.new-tag }}/CweamCraft-${{ needs.check-new.outputs.clean-tag }}.zip\" %}~" public/download.md
        shell: bash

      - name: commit web update
        uses: EndBug/add-and-commit@v9
        with:
          add: |
            - ${{ steps.post-path.outputs.path }}
          default_author: github_actions
          message: "chore: update web releases"

      - name: create release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.release-notes.outputs.notes }}
          name: CweamCraft ${{ needs.check-new.outputs.new-tag }}
          files: CweamCraft-${{ needs.check-new.outputs.clean-tag }}.zip
          tag_name: ${{ needs.check-new.outputs.new-tag }}

      - name: deploy-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          enable_jekyll: true
